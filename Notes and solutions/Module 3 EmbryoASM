# ssh -i key hacker@dojo.pwn.college

# open.s file
.intel_syntax noprefix
mov BYTE PTR [rsp], '/'
mov BYTE PTR [rsp+1], 'e'
mov BYTE PTR [rsp+2], 't'
mov BYTE PTR [rsp+3], 'c'
mov BYTE PTR [rsp+4], '/'
mov BYTE PTR [rsp+5], 'p'
mov BYTE PTR [rsp+6], 'a'
mov BYTE PTR [rsp+7], 's
mov BYTE PTR [rsp+8], 's'
mov BYTE PTR [rsp+9], 'w'
mov BYTE PTR [rsp+10], 'd'
mov BYTE PTR [rsp+11], '0'
mov rax, 2
mov rdi, rsp
mov rsi, 0
syscall

# 1 
# assembly .s file
.intel_syntax noprefix
mov rdi, 0x1337

gcc -nostdlib -o solve.elf flag1.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/embryoasm_level1 

pwn.college{US3o4ruH6EpBT6VAmM9Tr-W9enz.QX0kTMscTOxUzW}


# 2
# s file
.intel_syntax noprefix
add %rdi, 0x331337

gcc -nostdlib -o solve.elf flag2.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/embryoasm_level2

pwn.college{4a8SCXTfdkhoT1Ef5un1Oj1tmGu.QX1kTMscTOxUzW}

# 3 mx + b
# s file
.intel_syntax noprefix
imul rdi, rsi
add rdi, rdx
mov rax, rdi 

gcc -nostdlib -o solve.elf flag3.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/embryoasm_level3

pwn.college{0BuIzCdny4yYsNe2QCLavfu-Cz8.QX2kTMscTOxUzW}

# 4
Recall division in x86 is more special than in normal math. Math in here is
called integer math. This means everything, as it is now, is in the realm
of whole looking numbers. As an example:
10 / 3 = 3 in integer math. Why? Because 3.33 gets rounded down to an integer.
The relevant instructions for this level are:
mov rax, reg1; div reg2
Notice: to use this instruction you need to first load rax with the desired register
you intended to be the divided. Then run div reg2, where reg2 is the divisor. This
results in:
rax = rdi / rsi; rdx = remainder
The quotient is placed in rax, the remainder is placed in rdx.
Please compute the following:
speed = distance / time, where:
distance = rdi
time = rsi
Place the value of speed into rax given the above.
We will now set the following in preparation for your code:
rdi = 0xf0c
rsi = 0x39

# s file
.intel_syntax noprefix
mov rax, rdi
div rsi

gcc -nostdlib -o solve.elf flag4.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/embryoasm_level4

pwn.college{UjvcfEM-JjxR85a26amFPHHkJSp.QX3kTMscTOxUzW}

# 5
To interact with any level you will send raw bytes over stdin to this program.
To efficiently solve these problems, first run it once to see what you need
then craft, assemble, and pipe your bytes to this program.

In this level you will be working with registers. You will be asked to modify
or read from registers_use.

We will now set some values in memory dynamically before each run. On each run
the values will change. This means you will need to do some type of formulaic
operation with registers_use. We will tell you which registers_use are set beforehand
and where you should put the result. In most cases, its rax.

Modulo in assembly is another interesting concept! x86 allows you to get the
remainder after doing a division on something. For instance:
10 / 3  ->  remainder = 1
You can get the remainder of a division using the instructions introduced earlier
through the div instruction.
In most programming languages we refer to mod with the symbol '%'.

Please compute the following:
rdi % rsi
Place the value in rax.

We will now set the following in preparation for your code:
rdi = 0x21e25dad
rsi = 0x3ff

Please give me your assembly in bytes (up to 0x1000 bytes): 

# s file
.intel_syntax noprefix
mov rax, rdi
div rsi
mov rax, rdx

gcc -nostdlib -o solve.elf flag5.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/embryoasm_level5

pwn.college{kSsdSAyHcR7aUl2zyEVFvCrutkE.QX4kTMscTOxUzW}


# 6 
Using only the following instruction(s)
mov
Please compute the following:
rax = rdi modulo 256
rbx = rsi modulo 65536

We will now set the following in preparation for your code:
rdi = 0xfa2a
rsi = 0x2a7d3fb

# s file
.intel_syntax noprefix
mov rax, 0
mov al, dil //mod 256
mov rbx, 0
mov bx, si

gcc -nostdlib -o solve.elf flag6.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/embryoasm_level6

pwn.college{o95v336kEDZMr0oBLEK8lXpUyM4.QX5kTMscTOxUzW}

# 7
Shifting in assembly is another interesting concept! x86 allows you to 'shift'
bits around in a register. Take for instance, rax. For the sake of this example
say rax only can store 8 bits (it normally stores 64). The value in rax is:
rax = 10001010
We if we shift the value once to the left:
shl rax, 1
The new value is:
rax = 00010100
As you can see, everything shifted to the left and the highest bit fell off and
a new 0 was added to the right side. You can use this to do special things to
the bits you care about. It also has the nice side affect of doing quick multiplication,
division, and possibly modulo.
Here are the important instructions:
shl reg1, reg2       <=>     Shift reg1 left by the amount in reg2
shr reg1, reg2       <=>     Shift reg1 right by the amount in reg2
Note: all 'regX' can be replaced by a constant or memory location

Using only the following instructions:
mov, shr, shl
Please perform the following:
Set rax to the 5th least significant byte of rdi
i.e.
rdi = | B7 | B6 | B5 | B4 | B3 | B2 | B1 | B0 |
Set rax to the value of B4

We will now set the following in preparation for your code:
rdi = 0x7af9cd217eb95c1f

# s 0x891be746bcfe14dd
.intel_syntax noprefix
mov rax, rdi
shr rax, 4 
shl rax, 15

gcc -nostdlib -o solve.elf flag7.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/embryoasm_level7

# 8
.intel_syntax noprefix
or rax, rdi
and rax, rsi

gcc -nostdlib -o solve.elf flag8.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/embryoasm_level8

pwn.college{MYfyjR2k66GzgGktLrB4RXGVAJB.QXxAjMscTOxUzW}

# 9
# s file
.intel_syntax noprefix


# 14
pop rax
sub rax, rd

# 18
.intel_syntax noprefix

cmp dword ptr[rdi], 0x7f454c46
jne else_if
if:
	mov rax, 0
	add eax, dword ptr [rdi + 4]
	add eax, dword ptr [rdi + 8]
	add eax, dword ptr [rdi + 12]
	jmp post
else_if:
	cmp dword ptr [rdi], 0x00005A4D
	jne else
	mov eax, dword ptr [rdi + 4]
	sub eax, dword ptr [rdi + 8]
	sub eax, dword ptr [rdi + 12]
	jmp post

else:
	mov rax, 1
	mul dword ptr [rdi + 4]
	mul dword ptr [rdi + 8]
	mul dword ptr [rdi + 12]
	jmp post
post:
	nop

gcc -nostdlib -o solve.elf flag18.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf
cat solve.bin | /challenge/embryoasm_level18

cat solve.bin | /challenge/embryoasm_level18
pwn.college{s3p9hWItO8RMT1iNbIKzctCSWWB.QXxEjMscTOxUzW}



# python to assembly
import pwn

pwn.context.arch = "amd64"
pwn.context.encoding = "latin-1"
pwn.context.log_level = "INFO"
pwn.warnings.simplefilter("ignore")
assmebly = """

mov rdi, 0x1337

mov rax, SYS_exit
syscall
"""

with pwn.process(f"/challenge/{pwn.os.getenv('HOSTNAME')}") as target:
    pwn.info(target.readrepeat(1))

    targ.send(pwn.asm(assmembly))
    pwn.info(target.readrepeat(1))
#print(pwn.asm(assembly))